package net.mooctest;

import org.junit.Assert;
import org.junit.Test;

import java.io.*;

public class OokEngineTest {
    @Test
    public void testConstruct() {
        new OokEngine(10);
        new OokEngine(10, System.out);
        new OokEngine(10, System.out, System.in);
        try {
            new OokEngine(-1);
            Assert.fail();
        } catch (Exception e) {
        }
    }

    private void testWithFile(String prog, String input, String expectedDebugOutput) throws Exception {
        File file = new File("test");
        FileOutputStream fos = new FileOutputStream(file);
        fos.write(prog.getBytes());
        fos.flush();
        fos.close();

        PrintStream sysOut = System.out;
        ByteArrayOutputStream os = new ByteArrayOutputStream();
        ByteArrayInputStream is = new ByteArrayInputStream(input.getBytes());
        System.setOut(new PrintStream(os));
        OokEngine engine = new OokEngine(1024, os, is);
        engine.interpret(file);
        is.close();
        os.close();
        System.setOut(sysOut);
        Assert.assertEquals(expectedDebugOutput, os.toString().replaceAll("\\s", ""));
    }

    @Test
    public void testHelloWorld() throws Exception {
        testWithFile("Ook. Ook? Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook! Ook? Ook? Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook? Ook! Ook! Ook? Ook! Ook? Ook. Ook! Ook. Ook. Ook? Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook! Ook? Ook? Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook? Ook! Ook! Ook? Ook! Ook? Ook. Ook. Ook. Ook! Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook! Ook. Ook! Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook! Ook. Ook. Ook? Ook. Ook? Ook. Ook? Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook! Ook? Ook? Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook? Ook! Ook! Ook? Ook! Ook? Ook. Ook! Ook. Ook. Ook? Ook. Ook? Ook. Ook? Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook! Ook? Ook? Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook? Ook! Ook! Ook? Ook! Ook? Ook. Ook! Ook! Ook! Ook! Ook! Ook! Ook! Ook. Ook? Ook. Ook? Ook. Ook? Ook. Ook? Ook. Ook! Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook! Ook. Ook! Ook! Ook! Ook! Ook! Ook! Ook! Ook! Ook! Ook! Ook! Ook! Ook! Ook. Ook! Ook! Ook! Ook! Ook! Ook! Ook! Ook! Ook! Ook! Ook! Ook! Ook! Ook! Ook! Ook! Ook! Ook. Ook. Ook? Ook. Ook? Ook. Ook. Ook! Ook
    }

    @Test
    public void testInput() throws Exception {
        testWithFile("Ook! Ook? Ook! Ook? Ook? Ook! Ook? Ook! Ook. Ook. Ook. Ook. Ook! Ook? Ook. Ook? Ook! Ook? Ook? Ook! Ook? Ook. Ook! Ook! Ook? Ook! Ook. Ook! Ook! Ook.", "?", "BRACKET_LEFTPLUSPLUSBRACKET_LEFTNEXTBRACKET_LEFTPREVIOUSMINUSBRACKET_RIGHTNEXTBRACKET_LEFTPREVIOUSMINUSBRACKET_RIGHTINPUTOUTPUT");
    }

    @Test
    public void testInvalidToken() throws Exception {
        testWithFile("Ook??? Ook! Ook.", "", "OUTPUT");
        testWithFile("Ook!!!", "", "");
    }

    @Test
    public void testCellRange() throws Exception {
        PrintStream sysOut = System.out;
        ByteArrayOutputStream os = new ByteArrayOutputStream();
        System.setOut(new PrintStream(os));

        OokEngine engine = new OokEngine(3, os);
        engine.interpret("Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook! Ook? Ook. Ook? Ook. Ook? Ook. Ook? Ook! Ook! Ook? Ook. Ook? Ook. Ook? Ook. Ook? Ook. Ook! Ook! Ook? Ook!");

        os.close();
        System.setOut(sysOut);
        Assert.assertEqualsos.toString().replaceAll("\\s", ""));
        Assert.assertEquals(0, engine.data[0]);
    }
}
