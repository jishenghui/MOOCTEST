package net.mooctest;

import org.junit.After;
import org.junit.Before;
import org.junit.Test;

import static org.junit.Assert.*;
public class MatrixInverseTest {

    @Before
    public void setUp() throws Exception {
    }

    @After
    public void tearDown() throws Exception {
    }


    @Test
    public void test1(){
        double[][] inverse = MatrixInverse.inverse(d);
        double in[][]=new double[][]{{0.0,4.211916771785094E7,-4.148181978351192E7,6961643.827986462,-2.128321418019323E7,9170355.65102041,-1.773152058253433E7,3.577389681976821E7,-4.3001557129885755E7,4686394.824541179,},
                {0.0,-1.7651982911767825E7,1.5004196493338643E7,1.3113843919520814E7,4086573.247257499,-909336.5315792717,2942054.3341271672,-2.2727622539667185E7,4248974.014692214,-1.1679169521242898E7,},
                {0.0,5.8549851299150646E7,-5.758146023827492E7,-4983289.184650473,-4.3295601822549425E7,2.3950878613675915E7,-1.5494222381686091E7,6.514036337910703E7,-6.6644636896130264E7,1.8135586181851808E7,},
                {0.0,7142011.216945364,2692810.5358402906,-1.0288636115134662E7,6449741.839183316,1.4874684965684708E7,-1.039025760548855E7,-7623863.933335776,7311751.68122613,-1.3110610448262712E7,},
                {0.0,-2.892020347241737E7,3.2689735758245885E7,2544656.1823444986,1.8569858162207242E7,-2.397582508903666E7,5956978.6683910135,-4.084682870636571E7,3.7455241854944326E7,-334414.4207193325,},
                {0.0,-2.4007424580063086E7,3.963364870676524E7,-4698882.607916048,1.828922346933686E7,-1.6081781701442774E7,1.1500882961270843E7,-3.048514299120314E7,3.9075341042375594E7,-6737457.006928727,},
                {0.0,-2.4982614060324475E7,4.1355185018865034E7,2956376.952529038,2.7289508311604522E7,-1.2203943058765404E7,1.430353602196828E7,-4.568888828988782E7,3.446679892072556E7,-5208575.715704283,},
                {0.0,-2.2736197246704195E7,1.2598353037221001E7,1.1183115938774455E7,5347128.088448875,-1.0081639275725633E7,1.6271558370724177E7,-2.6771453257485442E7,1.9910595283911515E7,-4621210.2420762535,},
                {0.0,-4252911.582033113,-7002326.321602479,-1526176.1735606869,-3638044.4719678517,5741209.839110728,-4311154.345772122,-6410113.717586527,-9555933.407275332,-2.051569177677232E7,},
                {1.0,-3.0800019244290238,3.378969389424354,-0.051397217069572954,1.6488055709865581,-1.7907610853691613,1.0280457251164214,-2.709930954855518,2.9832954310113595,0.2620688967136764,}};
        assertArrayEquals(in,inverse);
        boolean inconsistent = MatrixInverse.isInconsistent(d);
        assertEquals(false,inconsistent);
        boolean b = MatrixInverse.hasMultipleSolutions(d);
        assertEquals(false,b);
        MatrixInverse.solve(d);
        for (int i = 0; i < d.length; i++) {
            System.out.print("{");
            for (int j = 0; j < d[i].length; j++) {
                System.out.print(d[i][j]+",");
            }
            System.out.println("},");
        }
        double[][]dd=new double[][]{{1.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.582008197233572,},
                {0.0,1.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,-0.8827350018133425,},
                {0.0,0.0,1.0,0.0,0.0,0.0,0.0,0.0,0.0,0.37473966065901876,},
                {0.0,0.0,0.0,1.0,0.0,0.0,0.0,0.0,0.0,-0.5245619451188864,},
                {-0.0,-0.0,-0.0,-0.0,1.0,0.0,0.0,0.0,0.0,0.6676608540109227,},
                {0.0,0.0,0.0,0.0,0.0,1.0,0.0,0.0,0.0,0.17005124281360073,},
                {-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,1.0,0.0,0.0,-0.14206654980443517,},
                {-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,1.0,0.0,-0.6245067968937139,},
                {-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,1.0,-1.100729811019269,},
                {0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,-4.832812709737501E-9,}};
        assertArrayEquals(dd,d);
        System.out.println();
    }
    double[][]d={{4.509218404297868E-8,-1.5418816799396286E-8,3.4793192433095644E-9,4.052271301466384E-8,-3.826881681773812E-8,-6.282529460941777E-9,-4.335056799130499E-9,4.113719032936127E-8,3.5529594924148977E-9,-3.570246392349862E-8,},
            {3.846979773822461E-8,-1.2256813828612889E-8,1.0721618455331938E-8,1.6450304190250475E-8,-1.0548486388636159E-8,3.652503660353832E-8,2.2517202959595428E-8,2.1099629917644537E-8,-7.562177716848217E-9,1.971429556004014E-8,},
            {-3.797989976728056E-9,4.747683080246724E-8,1.71803735343807E-8,-8.270217033560478E-9,-1.0985841703652144E-8,4.470544145849947E-8,1.443927881623408E-9,-3.4346406426843446E-8,-1.4555254038154153E-8,4.1897187215176655E-9,},
            {3.5158043127565054E-8,4.619840986576442E-8,-2.6072352270428867E-8,6.667420576050753E-9,-2.5206556696365158E-8,1.151299509938406E-8,-2.2831373032212164E-8,1.804119914963128E-8,-4.72144959895074E-8,-4.511009562982193E-9,},
            {1.8563096404630176E-8,-3.8518092659910185E-8,-4.838764541850281E-8,-2.532630060134462E-8,-3.6500441316475816E-8,-4.0198973634449564E-8,4.5045324334169256E-8,-3.054014395386393E-8,8.818316071280762E-9,1.1718295583583593E-8,},
            {-2.987541035522846E-8,2.791478028451898E-8,6.292830812969019E-9,3.8404540821264846E-8,-1.742699097087149E-8,-2.7572206938340217E-8,-3.2763432637844426E-9,1.2558642760863459E-8,-3.435364873456954E-8,-4.570389613116196E-8,},
            {8.25704320658427E-11,-3.87185670035611E-8,7.828209295059663E-9,-2.056417326514507E-8,-4.588280342638764E-8,1.613826083101474E-8,3.8313107975528095E-8,3.959616793148598E-8,1.8924040716778322E-8,-3.094414903240477E-8,},
            {1.0881412356383591E-8,7.771260197423568E-9,-3.17794590801855E-8,-1.8922011320734567E-8,-4.344512316595287E-8,3.394549013275033E-8,-3.060562676273977E-8,-1.7491521369630403E-8,-1.6668273079742635E-8,7.874590765373956E-9,},
            {1.3880901388582334E-8,-2.4012767179364624E-9,-1.26645691979961E-8,3.9296195010427647E-8,-2.982622526240131E-9,2.469118506359108E-8,-4.6128601972588433E-8,4.277990673863937E-8,-3.775496289108305E-8,3.6088602097516744E-9,},
            {-3.082897041524898E-8,4.368393451708774E-9,1.837804476025322E-8,6.084898050534859E-9,3.401268982910127E-8,-4.977259299841652E-8,1.0630729866952804E-8,-7.844748780090993E-9,-3.105566275206071E-8,3.3714000856546755E-8,}};
}
